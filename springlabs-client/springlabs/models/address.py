# coding: utf-8

"""
    Spring PACE Product Client Software Server

    This section describes the API calls and their usage to interact with the Spring Network.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@springlabs.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from springlabs.configuration import Configuration


class Address(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_city': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_state': 'str',
        'address_zip': 'str'
    }

    attribute_map = {
        'address_city': 'addressCity',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'address_state': 'addressState',
        'address_zip': 'addressZip'
    }

    def __init__(self, address_city=None, address_line1=None, address_line2=None, address_state=None, address_zip=None, local_vars_configuration=None):  # noqa: E501
        """Address - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address_city = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_state = None
        self._address_zip = None
        self.discriminator = None

        self.address_city = address_city
        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        self.address_state = address_state
        self.address_zip = address_zip

    @property
    def address_city(self):
        """Gets the address_city of this Address.  # noqa: E501


        :return: The address_city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this Address.


        :param address_city: The address_city of this Address.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_city is None:  # noqa: E501
            raise ValueError("Invalid value for `address_city`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_city is not None and len(address_city) > 255):
            raise ValueError("Invalid value for `address_city`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_city is not None and len(address_city) < 0):
            raise ValueError("Invalid value for `address_city`, length must be greater than or equal to `0`")  # noqa: E501

        self._address_city = address_city

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501


        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.


        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_line1 is None:  # noqa: E501
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_line1 is not None and len(address_line1) > 255):
            raise ValueError("Invalid value for `address_line1`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_line1 is not None and len(address_line1) < 0):
            raise ValueError("Invalid value for `address_line1`, length must be greater than or equal to `0`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501


        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.


        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address_line2 is not None and len(address_line2) > 255):
            raise ValueError("Invalid value for `address_line2`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_line2 is not None and len(address_line2) < 0):
            raise ValueError("Invalid value for `address_line2`, length must be greater than or equal to `0`")  # noqa: E501

        self._address_line2 = address_line2

    @property
    def address_state(self):
        """Gets the address_state of this Address.  # noqa: E501


        :return: The address_state of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this Address.


        :param address_state: The address_state of this Address.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_state is None:  # noqa: E501
            raise ValueError("Invalid value for `address_state`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_state is not None and len(address_state) > 255):
            raise ValueError("Invalid value for `address_state`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_state is not None and len(address_state) < 0):
            raise ValueError("Invalid value for `address_state`, length must be greater than or equal to `0`")  # noqa: E501

        self._address_state = address_state

    @property
    def address_zip(self):
        """Gets the address_zip of this Address.  # noqa: E501


        :return: The address_zip of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """Sets the address_zip of this Address.


        :param address_zip: The address_zip of this Address.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_zip is None:  # noqa: E501
            raise ValueError("Invalid value for `address_zip`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_zip is not None and len(address_zip) > 255):
            raise ValueError("Invalid value for `address_zip`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_zip is not None and len(address_zip) < 0):
            raise ValueError("Invalid value for `address_zip`, length must be greater than or equal to `0`")  # noqa: E501

        self._address_zip = address_zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Address):
            return True

        return self.to_dict() != other.to_dict()
