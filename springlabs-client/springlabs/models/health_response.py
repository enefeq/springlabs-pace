# coding: utf-8

"""
    Spring PACE Product Client Software Server

    This section describes the API calls and their usage to interact with the Spring Network.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@springlabs.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from springlabs.configuration import Configuration


class HealthResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gateway_status': 'str',
        'service_name': 'str',
        'service_status': 'str',
        'smartystreets_status': 'str'
    }

    attribute_map = {
        'gateway_status': 'gatewayStatus',
        'service_name': 'serviceName',
        'service_status': 'serviceStatus',
        'smartystreets_status': 'smartystreetsStatus'
    }

    def __init__(self, gateway_status=None, service_name=None, service_status=None, smartystreets_status=None, local_vars_configuration=None):  # noqa: E501
        """HealthResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gateway_status = None
        self._service_name = None
        self._service_status = None
        self._smartystreets_status = None
        self.discriminator = None

        if gateway_status is not None:
            self.gateway_status = gateway_status
        if service_name is not None:
            self.service_name = service_name
        if service_status is not None:
            self.service_status = service_status
        if smartystreets_status is not None:
            self.smartystreets_status = smartystreets_status

    @property
    def gateway_status(self):
        """Gets the gateway_status of this HealthResponse.  # noqa: E501


        :return: The gateway_status of this HealthResponse.  # noqa: E501
        :rtype: str
        """
        return self._gateway_status

    @gateway_status.setter
    def gateway_status(self, gateway_status):
        """Sets the gateway_status of this HealthResponse.


        :param gateway_status: The gateway_status of this HealthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                gateway_status is not None and len(gateway_status) > 255):
            raise ValueError("Invalid value for `gateway_status`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gateway_status is not None and len(gateway_status) < 0):
            raise ValueError("Invalid value for `gateway_status`, length must be greater than or equal to `0`")  # noqa: E501

        self._gateway_status = gateway_status

    @property
    def service_name(self):
        """Gets the service_name of this HealthResponse.  # noqa: E501


        :return: The service_name of this HealthResponse.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this HealthResponse.


        :param service_name: The service_name of this HealthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service_name is not None and len(service_name) > 255):
            raise ValueError("Invalid value for `service_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                service_name is not None and len(service_name) < 0):
            raise ValueError("Invalid value for `service_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._service_name = service_name

    @property
    def service_status(self):
        """Gets the service_status of this HealthResponse.  # noqa: E501


        :return: The service_status of this HealthResponse.  # noqa: E501
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this HealthResponse.


        :param service_status: The service_status of this HealthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service_status is not None and len(service_status) > 255):
            raise ValueError("Invalid value for `service_status`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                service_status is not None and len(service_status) < 0):
            raise ValueError("Invalid value for `service_status`, length must be greater than or equal to `0`")  # noqa: E501

        self._service_status = service_status

    @property
    def smartystreets_status(self):
        """Gets the smartystreets_status of this HealthResponse.  # noqa: E501


        :return: The smartystreets_status of this HealthResponse.  # noqa: E501
        :rtype: str
        """
        return self._smartystreets_status

    @smartystreets_status.setter
    def smartystreets_status(self, smartystreets_status):
        """Sets the smartystreets_status of this HealthResponse.


        :param smartystreets_status: The smartystreets_status of this HealthResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                smartystreets_status is not None and len(smartystreets_status) > 255):
            raise ValueError("Invalid value for `smartystreets_status`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                smartystreets_status is not None and len(smartystreets_status) < 0):
            raise ValueError("Invalid value for `smartystreets_status`, length must be greater than or equal to `0`")  # noqa: E501

        self._smartystreets_status = smartystreets_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthResponse):
            return True

        return self.to_dict() != other.to_dict()
