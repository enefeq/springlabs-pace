# coding: utf-8

"""
    Spring PACE Product Client Software Server

    This section describes the API calls and their usage to interact with the Spring Network.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@springlabs.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from springlabs.configuration import Configuration


class LienStatusData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'canceled': 'StatusCanceled',
        'funded': 'StatusData',
        'notice_to_proceed': 'StatusData',
        'signed_assessment_contract': 'StatusData'
    }

    attribute_map = {
        'canceled': 'canceled',
        'funded': 'funded',
        'notice_to_proceed': 'noticeToProceed',
        'signed_assessment_contract': 'signedAssessmentContract'
    }

    def __init__(self, canceled=None, funded=None, notice_to_proceed=None, signed_assessment_contract=None, local_vars_configuration=None):  # noqa: E501
        """LienStatusData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._canceled = None
        self._funded = None
        self._notice_to_proceed = None
        self._signed_assessment_contract = None
        self.discriminator = None

        if canceled is not None:
            self.canceled = canceled
        if funded is not None:
            self.funded = funded
        if notice_to_proceed is not None:
            self.notice_to_proceed = notice_to_proceed
        if signed_assessment_contract is not None:
            self.signed_assessment_contract = signed_assessment_contract

    @property
    def canceled(self):
        """Gets the canceled of this LienStatusData.  # noqa: E501


        :return: The canceled of this LienStatusData.  # noqa: E501
        :rtype: StatusCanceled
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this LienStatusData.


        :param canceled: The canceled of this LienStatusData.  # noqa: E501
        :type: StatusCanceled
        """

        self._canceled = canceled

    @property
    def funded(self):
        """Gets the funded of this LienStatusData.  # noqa: E501


        :return: The funded of this LienStatusData.  # noqa: E501
        :rtype: StatusData
        """
        return self._funded

    @funded.setter
    def funded(self, funded):
        """Sets the funded of this LienStatusData.


        :param funded: The funded of this LienStatusData.  # noqa: E501
        :type: StatusData
        """

        self._funded = funded

    @property
    def notice_to_proceed(self):
        """Gets the notice_to_proceed of this LienStatusData.  # noqa: E501


        :return: The notice_to_proceed of this LienStatusData.  # noqa: E501
        :rtype: StatusData
        """
        return self._notice_to_proceed

    @notice_to_proceed.setter
    def notice_to_proceed(self, notice_to_proceed):
        """Sets the notice_to_proceed of this LienStatusData.


        :param notice_to_proceed: The notice_to_proceed of this LienStatusData.  # noqa: E501
        :type: StatusData
        """

        self._notice_to_proceed = notice_to_proceed

    @property
    def signed_assessment_contract(self):
        """Gets the signed_assessment_contract of this LienStatusData.  # noqa: E501


        :return: The signed_assessment_contract of this LienStatusData.  # noqa: E501
        :rtype: StatusData
        """
        return self._signed_assessment_contract

    @signed_assessment_contract.setter
    def signed_assessment_contract(self, signed_assessment_contract):
        """Sets the signed_assessment_contract of this LienStatusData.


        :param signed_assessment_contract: The signed_assessment_contract of this LienStatusData.  # noqa: E501
        :type: StatusData
        """

        self._signed_assessment_contract = signed_assessment_contract

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LienStatusData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LienStatusData):
            return True

        return self.to_dict() != other.to_dict()
