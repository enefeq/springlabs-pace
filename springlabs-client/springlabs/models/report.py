# coding: utf-8

"""
    Spring PACE Product Client Software Server

    This section describes the API calls and their usage to interact with the Spring Network.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@springlabs.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from springlabs.configuration import Configuration


class Report(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application_type': 'ApplicationTypeEnum',
        'binding_id': 'str',
        'current_status': 'LienStatusEnum',
        'lien_status_data': 'LienStatusData',
        'own_attestation': 'bool',
        'status_change_timestamp': 'str'
    }

    attribute_map = {
        'application_type': 'applicationType',
        'binding_id': 'bindingId',
        'current_status': 'currentStatus',
        'lien_status_data': 'lienStatusData',
        'own_attestation': 'ownAttestation',
        'status_change_timestamp': 'statusChangeTimestamp'
    }

    def __init__(self, application_type=None, binding_id=None, current_status=None, lien_status_data=None, own_attestation=None, status_change_timestamp=None, local_vars_configuration=None):  # noqa: E501
        """Report - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._application_type = None
        self._binding_id = None
        self._current_status = None
        self._lien_status_data = None
        self._own_attestation = None
        self._status_change_timestamp = None
        self.discriminator = None

        self.application_type = application_type
        self.binding_id = binding_id
        self.current_status = current_status
        self.lien_status_data = lien_status_data
        self.own_attestation = own_attestation
        self.status_change_timestamp = status_change_timestamp

    @property
    def application_type(self):
        """Gets the application_type of this Report.  # noqa: E501


        :return: The application_type of this Report.  # noqa: E501
        :rtype: ApplicationTypeEnum
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this Report.


        :param application_type: The application_type of this Report.  # noqa: E501
        :type: ApplicationTypeEnum
        """
        if self.local_vars_configuration.client_side_validation and application_type is None:  # noqa: E501
            raise ValueError("Invalid value for `application_type`, must not be `None`")  # noqa: E501

        self._application_type = application_type

    @property
    def binding_id(self):
        """Gets the binding_id of this Report.  # noqa: E501


        :return: The binding_id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._binding_id

    @binding_id.setter
    def binding_id(self, binding_id):
        """Sets the binding_id of this Report.


        :param binding_id: The binding_id of this Report.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and binding_id is None:  # noqa: E501
            raise ValueError("Invalid value for `binding_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                binding_id is not None and len(binding_id) > 255):
            raise ValueError("Invalid value for `binding_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                binding_id is not None and len(binding_id) < 0):
            raise ValueError("Invalid value for `binding_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._binding_id = binding_id

    @property
    def current_status(self):
        """Gets the current_status of this Report.  # noqa: E501


        :return: The current_status of this Report.  # noqa: E501
        :rtype: LienStatusEnum
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this Report.


        :param current_status: The current_status of this Report.  # noqa: E501
        :type: LienStatusEnum
        """
        if self.local_vars_configuration.client_side_validation and current_status is None:  # noqa: E501
            raise ValueError("Invalid value for `current_status`, must not be `None`")  # noqa: E501

        self._current_status = current_status

    @property
    def lien_status_data(self):
        """Gets the lien_status_data of this Report.  # noqa: E501


        :return: The lien_status_data of this Report.  # noqa: E501
        :rtype: LienStatusData
        """
        return self._lien_status_data

    @lien_status_data.setter
    def lien_status_data(self, lien_status_data):
        """Sets the lien_status_data of this Report.


        :param lien_status_data: The lien_status_data of this Report.  # noqa: E501
        :type: LienStatusData
        """
        if self.local_vars_configuration.client_side_validation and lien_status_data is None:  # noqa: E501
            raise ValueError("Invalid value for `lien_status_data`, must not be `None`")  # noqa: E501

        self._lien_status_data = lien_status_data

    @property
    def own_attestation(self):
        """Gets the own_attestation of this Report.  # noqa: E501

        Indicates whether this is the Participant's attestation.  # noqa: E501

        :return: The own_attestation of this Report.  # noqa: E501
        :rtype: bool
        """
        return self._own_attestation

    @own_attestation.setter
    def own_attestation(self, own_attestation):
        """Sets the own_attestation of this Report.

        Indicates whether this is the Participant's attestation.  # noqa: E501

        :param own_attestation: The own_attestation of this Report.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and own_attestation is None:  # noqa: E501
            raise ValueError("Invalid value for `own_attestation`, must not be `None`")  # noqa: E501

        self._own_attestation = own_attestation

    @property
    def status_change_timestamp(self):
        """Gets the status_change_timestamp of this Report.  # noqa: E501


        :return: The status_change_timestamp of this Report.  # noqa: E501
        :rtype: str
        """
        return self._status_change_timestamp

    @status_change_timestamp.setter
    def status_change_timestamp(self, status_change_timestamp):
        """Sets the status_change_timestamp of this Report.


        :param status_change_timestamp: The status_change_timestamp of this Report.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status_change_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `status_change_timestamp`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status_change_timestamp is not None and len(status_change_timestamp) > 32):
            raise ValueError("Invalid value for `status_change_timestamp`, length must be less than or equal to `32`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status_change_timestamp is not None and len(status_change_timestamp) < 8):
            raise ValueError("Invalid value for `status_change_timestamp`, length must be greater than or equal to `8`")  # noqa: E501

        self._status_change_timestamp = status_change_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Report):
            return True

        return self.to_dict() != other.to_dict()
